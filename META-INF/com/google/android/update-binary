#!/sbin/sh
# 
##########################################################################################
# 
# Magisk
# by topjohnwu
# 
# This is Magisk Mount & UnMount IMG ZIP for Users/Developers.
# 
# By Dark1
# Profile :
# https://forum.xda-developers.com/member.php?u=7292542
# https://github.com/dark-1
# 
# This script will do the Following :=
# 
# IF [ "magisk.img" is NOT Mount'ed ] , Then :
#    This ZIP will Mount Magisk IMG.
#    Mount "magisk.img" -> "/Magisk" .
# 
# ELSE , Then :
#    This ZIP will UnMount & Shrink Magisk IMG.
#    UnMount "/Magisk" -> "magisk.img" & Shrink "magisk.img" .
# 
# DO Not Touch this Script Unless Necessary.
# 
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false

# Default permissions
umask 022

##########################################################################################
# Functions
##########################################################################################

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else 
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

mount_image() {
  if [ ! -d "$2" ]; then
    mount -o rw,remount rootfs /
    mkdir -p $2 2>/dev/null
    ($BOOTMODE) && mount -o ro,remount rootfs /
    [ ! -d "$2" ] && return 1
  fi
  if (! is_mounted $2); then
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        LOOPDEVICE=/dev/block/loop$LOOP
        if [ ! -f "$LOOPDEVICE" ]; then
          mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
        fi
        losetup $LOOPDEVICE $1
        if [ "$?" -eq "0" ]; then
          mount -t ext4 -o loop $LOOPDEVICE $2
          if (! is_mounted $2); then
            /system/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
          if (! is_mounted $2); then
            /system/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
        fi
        if (is_mounted $2); then
          ui_print "- Mounting \"$1\" to \"$2\""
          break;
        fi
      fi
    done
  fi
}

image_size_check() {
  e2fsck -yf $1
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f2`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

# Magic of UnMounting is Here
# Study Well ;-) B-)
umount_image() 
{
  PATHMOUNT=$1
  CHKIMG=$2
  DEVLOOP=`mount | grep " $PATHMOUNT " | head -n 1 | cut -c -16`
  CHKLOOP=`losetup -a | grep "$CHKIMG" | head -n 1 | cut -c -16`
  if [ "$DEVLOOP" == "$CHKLOOP" ];
  then
    umount $PATHMOUNT
    losetup -d $DEVLOOP
    rmdir $PATHMOUNT
    if ! is_mounted $PATHMOUNT;
    then
      ui_print "- UnMounting \"$PATHMOUNT\""
      ui_print "- Detaching \"$DEVLOOP\" from \"$CHKIMG\""
    else
      ui_print "! UnMounting \"$PATHMOUNT\" Failed"
    fi
  else
     ui_print "! Loop Device \"$DEVLOOP\" is Not Equal To \"$CHKLOOP\""
     ui_print "! UnMounting \"$PATHMOUNT\" Failed"
  fi
}

# ReSizeing the Image For Shrinking IF possible
resize_image()
{
  MGKIMG=$1
  # Shrink the image if possible
  image_size_check $MGKIMG
  NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
  if [ "$curSizeM" -gt "$NEWDATASIZE" ]; 
  then
    ui_print "- Shrinking \"$MGKIMG\" to ${NEWDATASIZE} M..."
    resize2fs $MGKIMG ${NEWDATASIZE}M
  fi
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

OUTFD=$2
ZIP=$3

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

# Variable
MOUNTPATH=/magisk
IMGNAME=magisk.img

if $BOOTMODE && ! is_mounted $MOUNTPATH; then
  ui_print "! Magisk is not activated!... abort"
  exit 1
fi

# Fix SuperSU.....
$BOOTMODE && $BINDIR/sepolicy-inject --live "allow fsck * * *"

if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMGNAME=magisk_merge.img
fi

##########################################################################################
# Main
##########################################################################################

ui_print " "
# Please leave this message in your flashable zip for credits :)
ui_print "********************************"
ui_print " Magisk Mount & UnMount IMG ZIP "
ui_print " By Dark1                       "
ui_print "********************************"
ui_print " "
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"
ui_print " "

ui_print "- Mounting /system(ro), /vendor(ro), /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

if is_mounted /data; then
  IMG=/data/$IMGNAME
  if [ ! -f "/data/$IMGNAME" ]; then
    ui_print "! Magisk is not installed!"
    ui_print "! Magisk is required to Mount OR UnMount!"
    ui_print "! Hence... abort!"
    exit 1
  fi
else
  IMG=/cache/$IMGNAME
  ui_print " "
  ui_print "***********************************"
  ui_print "*      !! Data unavailible !!     *"
  ui_print "* Magisk detection is impossible! *"
  ui_print "*     Yet! Will still proceed     *"
  ui_print "*  But please make sure you have  *"
  ui_print "*        Magisk installed!!       *"
  ui_print "***********************************"
  ui_print " "
fi

if [ -f "$IMG" ]; then
  ui_print "- \"$IMG\" detected!"
else
  ui_print "! \"$IMG\" NOT detected!... abort"
  exit 1
fi

# Magic to Mount Or UnMount of the Script is Here
# Study Well :-P  B-)
if ! is_mounted $MOUNTPATH; 
then
  ui_print "- Magisk Mount IMG Mode"
  mount_image $IMG $MOUNTPATH
  # Check if Still NOT Mount'ed
  if ! is_mounted $MOUNTPATH; 
  then
    ui_print "! \"$IMG\" mount failed... abort"
    exit 1
  fi
else
  ui_print "- Magisk UnMount IMG Mode"
  umount_image $MOUNTPATH $IMG
  # Check if Still Mount'ed
  if is_mounted $MOUNTPATH; 
  then
    ui_print "! \"$IMG\" Unmount failed... abort"
    exit 1
  fi
  # Shrink the image if possible
  resize_image $IMG
fi

if ! $BOOTMODE; then
  umount /system
  umount /vendor 2>/dev/null
fi

ui_print "- Done"
exit 0
